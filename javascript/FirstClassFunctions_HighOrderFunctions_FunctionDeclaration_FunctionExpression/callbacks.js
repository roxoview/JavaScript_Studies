//Callbacks
//callback em JavaScript sÃ£o funÃ§Ãµes passadas como argumento para outra funÃ§Ã£o e executadas posteriormente,
//  geralmente apÃ³s um evento ou um processo assÃ­ncrono. Elas sÃ£o muito utilizadas para controle de fluxo
//  e programaÃ§Ã£o assÃ­ncrona.

// function adicao(x,y){
//   return x + y
// }
// function multiplicacao(x,y){
//   return x * y
// }
// function divisao(x,y){
//   return x / y
// }
// function subtracao(x,y){
//   return x - y
// }
// function calculadora(x, operacao, y){
//   console.log(operacao(x,y))
// }

// calculadora(10, adicao, 10)
// calculadora(10, multiplicacao, 10)
// calculadora(10, subtracao, 10)

// Exemplo bÃ¡sico de callback
// javascript
// Copiar
// Editar
// function saudacao(nome, callback) {
//     console.log("OlÃ¡, " + nome);
//     callback();
// }

// function mostrarMensagem() {
//     console.log("Seja bem-vindo!");
// }

// saudacao("Lucas", mostrarMensagem);
// ðŸ”¹ ExplicaÃ§Ã£o:

// A funÃ§Ã£o saudacao recebe um nome e uma funÃ§Ã£o callback.
// Ela exibe uma mensagem com o nome e, em seguida, chama a callback, que imprime "Seja bem-vindo!".
// ðŸ”¹ Callback em funÃ§Ãµes assÃ­ncronas
// Callbacks sÃ£o muito usados em operaÃ§Ãµes assÃ­ncronas, como setTimeout ou requisiÃ§Ãµes AJAX.

// javascript
// Copiar
// Editar
// console.log("InÃ­cio");

// setTimeout(function () {
//     console.log("Isso aparece depois de 2 segundos.");
// }, 2000);

// console.log("Fim");
// ðŸ”¹ ExplicaÃ§Ã£o:

// O setTimeout recebe uma funÃ§Ã£o e um tempo (2 segundos) e executa essa funÃ§Ã£o apÃ³s esse tempo.
// Enquanto isso, o cÃ³digo continua rodando, exibindo "Fim" antes da mensagem do setTimeout.
// ðŸ”¹ Callbacks em funÃ§Ãµes que manipulam arrays
// O mÃ©todo .map() usa callbacks para transformar cada elemento do array.

// javascript
// Copiar
// Editar
// const numeros = [1, 2, 3, 4];

// const dobrados = numeros.map(function (numero) {
//     return numero * 2;
// });

// console.log(dobrados); // [2, 4, 6, 8]
// ðŸ”¹ ExplicaÃ§Ã£o:

// O .map() aplica a funÃ§Ã£o callback a cada elemento do array, retornando um novo array com os valores modificados.
// ðŸ”¹ Problema dos Callbacks Aninhados (Callback Hell)
// Quando muitos callbacks sÃ£o usados em sequÃªncia, o cÃ³digo pode ficar difÃ­cil de entender.

// javascript
// Copiar
// Editar
// function buscarDados(callback) {
//     setTimeout(() => {
//         console.log("Buscando dados...");
//         callback();
//     }, 1000);
// }

// function processarDados(callback) {
//     setTimeout(() => {
//         console.log("Processando dados...");
//         callback();
//     }, 1000);
// }

// function exibirResultados() {
//     setTimeout(() => {
//         console.log("Exibindo resultados.");
//     }, 1000);
// }

// // Chamando as funÃ§Ãµes em sequÃªncia
// buscarDados(() => {
//     processarDados(() => {
//         exibirResultados();
//     });
// });
// ðŸ”¹ Problema: CÃ³digo fica indentado demais e difÃ­cil de ler.
// ðŸ”¹ SoluÃ§Ã£o: Usar Promises ou async/await, que tornam o cÃ³digo mais organizado.

// ðŸ”¹ Alternativa Melhor: Usando Promises
// javascript
// Copiar
// Editar
// function buscarDados() {
//     return new Promise(resolve => {
//         setTimeout(() => {
//             console.log("Buscando dados...");
//             resolve();
//         }, 1000);
//     });
// }

// function processarDados() {
//     return new Promise(resolve => {
//         setTimeout(() => {
//             console.log("Processando dados...");
//             resolve();
//         }, 1000);
//     });
// }

// function exibirResultados() {
//     return new Promise(resolve => {
//         setTimeout(() => {
//             console.log("Exibindo resultados.");
//             resolve();
//         }, 1000);
//     });
// }

// buscarDados()
//     .then(processarDados)
//     .then(exibirResultados);
// ðŸ”¹ Vantagens das Promises:
// âœ… CÃ³digo mais legÃ­vel
// âœ… Evita aninhamento excessivo

// Se quiser, posso te explicar async/await, que melhora ainda mais a organizaÃ§Ã£o. ðŸš€

